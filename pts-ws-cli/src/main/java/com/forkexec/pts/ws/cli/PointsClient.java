package com.forkexec.pts.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.Response;

import com.forkexec.pts.ws.BadInitFault_Exception;
import com.forkexec.pts.ws.InvalidEmailFault_Exception;
import com.forkexec.pts.ws.InvalidPointsFault;
import com.forkexec.pts.ws.InvalidPointsFault_Exception;
import com.forkexec.pts.ws.NotEnoughBalanceFault_Exception;
import com.forkexec.pts.ws.ReadPointsResponse;
import com.forkexec.pts.ws.WritePointsResponse;
import com.forkexec.pts.ws.PointsPortType;
import com.forkexec.pts.ws.PointsService;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class PointsClient {

	/** WS service */
	PointsService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	List<PointsPortType> ports = null;

	/** UDDI server URL */
	private String uddiURL = null;

	/** WS name */
	private String wsNameGlobal = null;

	/** WS end point address */
	private List<String> wsURLs = null; // default value is defined inside WSDL

	private int maxTag = 0;

	/*
	 * public String getWsURL() { return wsURL; }
	 */

	/** output option **/
	private boolean verbose = false;

	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided UDDI location and name */
	public PointsClient(String uddiURL, String wsNameGlobal) throws PointsClientException {
		this.uddiURL = uddiURL;
		this.wsNameGlobal = wsNameGlobal;
		this.ports = new ArrayList<PointsPortType>();
		uddiLookup();
		createStub();
	}

	/** UDDI lookup */
	private void uddiLookup() throws PointsClientException {
		try {
			if (verbose)
				System.out.printf("Contacting UDDI at %s%n", uddiURL);
			UDDINaming uddiNaming = new UDDINaming(uddiURL);

			if (verbose)
				System.out.printf("Looking for '%s'%n", wsNameGlobal);
			wsURLs = (List<String>) uddiNaming.list(wsNameGlobal + "%");

		} catch (Exception e) {
			String msg = String.format("Client failed lookup on UDDI at %s!", uddiURL);
			throw new PointsClientException(msg, e);
		}

		if (wsURLs == null) {
			String msg = String.format("Service with name %s not found on UDDI at %s", wsNameGlobal, uddiURL);
			throw new PointsClientException(msg);
		}
	}

	/** Stub creation and configuration */
	private void createStub() {
		if (verbose)
			System.out.println("Creating stub ...");

		for (String wsURL : wsURLs) {

			PointsService service = new PointsService();
			PointsPortType port = service.getPointsPort();

			if (wsURL != null) {
				if (verbose)
					System.out.println("Setting endpoint address ...");
				BindingProvider bindingProvider = (BindingProvider) port;
				Map<String, Object> requestContext = bindingProvider.getRequestContext();
				requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
			}
			calculateMaxTag(port.getMaxTag());
			ports.add(port);
		}
	}

	// client methods --------------------------------------------------------------

	public void activateUser(String userEmail) throws InvalidEmailFault_Exception {
		readPoints(userEmail);
	}

	public int pointsBalance(String userEmail) throws InvalidEmailFault_Exception {
		return readPoints(userEmail);
	}

	public int addPoints(String userEmail, int pointsToAdd)
			throws InvalidEmailFault_Exception, InvalidPointsFault_Exception {
		int points = readPoints(userEmail) + pointsToAdd;
		if (points < 0)
			throwInvalidPointsFault("points cannot be negative");
		writePoints(userEmail, points);
		return points;

	}

	public int spendPoints(String userEmail, int pointsToSpend)
			throws InvalidEmailFault_Exception, InvalidPointsFault_Exception, NotEnoughBalanceFault_Exception {
		int points = readPoints(userEmail) - pointsToSpend;
		if (points < 0)
			throwInvalidPointsFault("points cannot be negative");
		writePoints(userEmail, points);
		return points;
	}

	// frontend methods -------------------------------------------------------

	private int readPoints(String userEmail) {
		List<Response<ReadPointsResponse>> responses = new ArrayList<Response<ReadPointsResponse>>();
		List<Response<ReadPointsResponse>> dones = new ArrayList<Response<ReadPointsResponse>>();
		List<Response<ReadPointsResponse>> onHold;
		long q = Math.round(ports.size() / 2.0);
		long r = 0;

		for (PointsPortType p : ports) {
			responses.add(p.readPointsAsync(userEmail));
		}
		while (r < q) {
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				continue;
			}
			onHold = new ArrayList<Response<ReadPointsResponse>>();
			for (Response<ReadPointsResponse> received : responses) {
				if (received.isDone()) {
					r++;
					dones.add(received);
				} else {
					onHold.add(received);
				}
			}
			responses = onHold;
		}
		int max = -1;
		int value = 0;
		for (Response<ReadPointsResponse> done : dones) {
			int current;
			try {
				current = done.get().getTag();
				if (current > max) {
					max = current;
					value = done.get().getPoints();
				}
			} catch (InterruptedException e) {
				continue;
			} catch (ExecutionException e) {
				//throw new InvalidEmailFault_Exception(message, faultInfo);
			}
		}
		return value;
	}

	private void writePoints(String userEmail, int balance) {
		List<Response<WritePointsResponse>> responses = new ArrayList<Response<WritePointsResponse>>();
		List<Response<WritePointsResponse>> dones = new ArrayList<Response<WritePointsResponse>>();
		List<Response<WritePointsResponse>> onHold;
		long q = Math.round(ports.size() / 2.0);
		long r = 0;
		maxTag++;

		for (PointsPortType p : ports) {
			responses.add(p.writePointsAsync(userEmail, balance, maxTag));
		}

		while (r < q) {
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				continue;
			}
			onHold = new ArrayList<Response<WritePointsResponse>>();
			for (Response<WritePointsResponse> received : responses) {
				if (received.isDone()) {
					r++;
					dones.add(received);

				} else {
					onHold.add(received);

				}
			}
			responses = onHold;
		}
		try {
			for (Response<WritePointsResponse> done : dones)
				done.get();
		} catch (InterruptedException e) {
			// TODO;
		} catch (ExecutionException e) {
			// TODO
		}
	}

	// control operations -----------------------------------------------------

	public String ctrlPing(String inputMessage) {
		String message = "";
		for (PointsPortType p : ports) {
			message += p.ctrlPing(inputMessage) + "\n";
		}
		return message;
	}

	public void ctrlClear() {
		for (PointsPortType p : ports)
			p.ctrlClear();
	}

	public void ctrlInit(int startPoints) throws BadInitFault_Exception {
		for (PointsPortType p : ports)
			p.ctrlInit(startPoints);
	}

	private void calculateMaxTag(int currentMaxTag) {
		if (currentMaxTag > maxTag)
			maxTag = currentMaxTag;
	}

	// Exception Helper
	// --------------------------------------------------------------
	private void throwInvalidPointsFault(final String message) throws InvalidPointsFault_Exception {
		final InvalidPointsFault faultInfo = new InvalidPointsFault();
		faultInfo.setMessage(message);
		throw new InvalidPointsFault_Exception(message, faultInfo);
	}

}
