package com.forkexec.pts.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.Response;

import com.forkexec.pts.ws.BadInitFault_Exception;
import com.forkexec.pts.ws.EmailAlreadyExistsFault_Exception;
import com.forkexec.pts.ws.InvalidEmailFault_Exception;
import com.forkexec.pts.ws.InvalidPointsFault_Exception;
import com.forkexec.pts.ws.NotEnoughBalanceFault_Exception;
import com.forkexec.pts.ws.ReadPointsResponse;
import com.forkexec.pts.ws.WriteUserResponse;
import com.forkexec.pts.ws.PointsPortType;
import com.forkexec.pts.ws.PointsService;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class PointsClient {

	/** WS service */
	PointsService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	List<PointsPortType> ports = null;

	/** UDDI server URL */
	private String uddiURL = null;

	/** WS name */
	private String wsNameGlobal = null;

	/** WS end point address */
	private List<String> wsURLs = null; // default value is defined inside WSDL

	/*public String getWsURL() {
		return wsURL;
	}*/

	/** output option **/
	private boolean verbose = false;

	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided UDDI location and name */
	public PointsClient(String uddiURL, String wsNameGlobal) throws PointsClientException {
		this.uddiURL = uddiURL;
		this.wsNameGlobal = wsNameGlobal;
		this.ports = new ArrayList<PointsPortType>();
		uddiLookup();
		createStub();
	}

	/** UDDI lookup */
	private void uddiLookup() throws PointsClientException {
		try {
			if (verbose)
				System.out.printf("Contacting UDDI at %s%n", uddiURL);
			UDDINaming uddiNaming = new UDDINaming(uddiURL);

			if (verbose)
				System.out.printf("Looking for '%s'%n", wsNameGlobal);
			wsURLs = (List<String>) uddiNaming.list(wsNameGlobal + "%");

		} catch (Exception e) {
			String msg = String.format("Client failed lookup on UDDI at %s!", uddiURL);
			throw new PointsClientException(msg, e);
		}

		if (wsURLs == null) {
			String msg = String.format("Service with name %s not found on UDDI at %s", wsNameGlobal, uddiURL);
			throw new PointsClientException(msg);
		}
	}

	/** Stub creation and configuration */
	private void createStub() {
		if (verbose)
			System.out.println("Creating stub ...");

		for (String wsURL : wsURLs) {

			PointsService service = new PointsService();
			PointsPortType port = service.getPointsPort();
			
			if (wsURL != null) { 
				if (verbose)
				System.out.println("Setting endpoint address ...");
				BindingProvider bindingProvider = (BindingProvider) port;
				Map<String, Object> requestContext = bindingProvider.getRequestContext();
				requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
			}

			ports.add(port);
		}
	}

	// client methods --------------------------------------------------------------

	public void activateUser(String userEmail) throws EmailAlreadyExistsFault_Exception, InvalidEmailFault_Exception {
		//chama o activateUserQ
	}

	public int pointsBalance(String userEmail) throws InvalidEmailFault_Exception {
		//return port.pointsBalance(userEmail);
	}

	public int addPoints(String userEmail, int pointsToAdd)
			throws InvalidEmailFault_Exception, InvalidPointsFault_Exception {
		//faz logica
	}
			
	public int spendPoints(String userEmail, int pointsToSpend)
			throws InvalidEmailFault_Exception, InvalidPointsFault_Exception, NotEnoughBalanceFault_Exception {
		//faz logica
	}

	// frontend methods -------------------------------------------------------

	private int readPoints(String userEmail) {
		//faz o quorum
		//chama o readPointAsync(tag, userEmail) do server
	}

	private void writePoints(String userEmail, int balance) {
		//faz o quorum
		//chama o readPointsAsync(tag, userEmail) do server
	}

	private void writeUser(String userEmail) {
		List<Response<WriteUserResponse>> responses = new ArrayList<Response<WriteUserResponse>>();
		long q = Math.round(ports.size() / 2.0);
		long r = 0;
		
		for (PointsPortType p : ports) {
			responses.add(p.writeUserAsync(userEmail));
		}
	
		while (r < q) {
			for (Response<WriteUserResponse> received : responses) {
				if (received.isDone()) {
					r++;
					responses.remove(received);
				}
			}
		}
		return null;
	}

	// control operations -----------------------------------------------------

	public String ctrlPing(String inputMessage) {
		return port.ctrlPing(inputMessage);
	}

	public void ctrlClear() {
		port.ctrlClear();
	}

	public void ctrlInit(int startPoints) throws BadInitFault_Exception {
		port.ctrlInit(startPoints);
	}
	
}
